#ifndef WRITE_HPP
#define WRITE_HPP



#include <fstream>
#include <string>
#include <windows.h>
#include "Misc.hpp"

class Writing {
public:
    Writing() {
        Resources = ";Resource file - Generated by the KoolB compiler\n";
        Library = ";Library functions to import to the KoolB program\n";
        FireUpApp = "\n\n;Initialize everything to prepare the program to run\n";
        MainApp = "\n\n;Main body of the program where the program runs\n";
        FinishUpApp = "\n\n;Prepare the program to exit, then terminate the program\n";
        AppData = "\n\n;Data section of the KoolB programp\n";
    }

    // Formats a string of assembly language code into a line and adds it to
    // the desired section.
    void Line(int Section, std::string Line);

    void Comment(int Section, std::string Comment);
    
    // Writes all the sections of the programs to files based on the FileName.
    void File(std::string FileName);

    // Runs the assembler, resource compiler, and linker.
    // Produces an executable
    void BuildApp(std::string FileName);

    enum Sections{ToData, ToFireUp, ToMain, ToFinishUp, ToResource, ToLibrary};

private:
    /*
    - AppData - Contains variables and data that the program will need.

    - FireUpApp - Contains initialization routines for the program like object
    constructors and internal code that gets the program ready to run user code.

    - MainApp - Contains the user's code.

    - FinishAppUp - Contains routines to clean up after the user and prepare
    the program to exit. Frees all memory associated with objects, variables,
    and the program in general.

    - Resources - Contains instructions for the resource compiler to tell it
    what files and resources to include and how to include them.

    - Library - Contains all the external functions that the program will
    need. (Windows API or Linux C-Library calls)
    */
    std::string AppData;
    std::string FireUpApp;
    std::string MainApp;
    std::string FinishUpApp;
    std::string Resources;
    std::string Library;  
};


// Line() takes Asm, which is a line of assembly language, and adds it to the
// desired Section
void Writing::Line(int Section, std::string Asm) {
    std::string Line = Asm + "\n";
    switch (Section) {
    case ToData:
        AppData += Line;
        break;
    case ToFireUp:
        FireUpApp += Line;
        break;
    case ToMain:
        MainApp += Line;
        break;
    case ToFinishUp:
        FinishUpApp += Line;
        break;
    case ToResource:
        Resources += Line;
        break;
    case ToLibrary:
        Library += Line;
        break;
    default:
        std::cout << "ERR: Cannot write to an invalid section." << std::endl;
        break;
    }
    return ;
}


void Writing::Comment(int Section, std::string Comment) {
    Line(Section, ";\t" + Comment);
}


void Writing::File(std::string FileName) {
    std::string AsmFileName = FileName + ".asm";
    std::string ResourceFileName = FileName + ".rc";
    std::ofstream AsmFile;
    std::ofstream ResourceFile;

    // Open the assembly and resource files
    AsmFile.open(AsmFileName.c_str(), std::ios::out);
    ResourceFile.open(ResourceFileName.c_str(), std::ios::out);

    // Write to assembly file
    AsmFile << Library << std::endl;
    AsmFile << FireUpApp << std::endl;
    AsmFile << MainApp << std::endl;
    AsmFile << FinishUpApp << std::endl;
    AsmFile << AppData << std::endl;

    // Write to resource file
    ResourceFile << Resources << std::endl;

    // Close the assembly and resource files
    AsmFile.close();
    ResourceFile.close();
    return ;
}


void Writing::BuildApp(std::string FileName) {
    File(FileName);
    if (OS == Windows) {
            Run("Asm\\nasm -E results.txt -f win32 \"" + FileName + ".asm\"");
            Run("Asm\\GoRC /r /ni /nw \"" + FileName + ".rc\" > results.txt");
        if (AppType == GUI) {
            Run("Asm\\GoLink /ni /nw \"" + FileName + ".obj\" \"" + FileName +
                ".res\" kernel32.dll user32.dll gdi32.dl msvcrt.dll > results.txt");
        }
        if (AppType == Console) {
            Run("Asm\\GoLink /ni /nw /console \"" + FileName + ".obj\" \"" + FileName
                + ".res\" kernel32.dll user32.dll gdi32.dl msvcrt.dll > results.txt");
        }
        return ;
    }

    if (OS == Linux) {
        Run("Asm\\NASM -E results.txt -f elf \"" + FileName + ".asm\"");
        return ;
    }
}

#endif // WRITE_HPP